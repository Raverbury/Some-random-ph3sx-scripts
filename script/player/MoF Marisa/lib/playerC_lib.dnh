/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	Player Recreation Project: MoF Marisa
	by Frenticpony
	
	playerC_lib.dnh v2.5
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */

let optionX1 = 160;
let optionY1 = 144;
let optionX2 = 176;
let optionY2 = 160;

let option_shotDamage = 1.725 * player_DamageMultiplier;
let option_frostBasicShotDamage = 2.3 * player_DamageMultiplier;

let opPos_levelOne   = [ 
	[0, -32, 0, 0], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelTwo   = [ 
	[-16, -32, 0, 0], 
	[16, -32, 0, 0],  
	[0, 0, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelThree = [ 
	[-30, -30, 0, 0], 
	[0, -36, 0, 0], 
	[30, -30, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelFour  = [ 
	[-41, -30, 0, 0], 
	[-13, -37, 0, 0], 
	[13, -37, 0, 0], 
	[41, -30, 0, 0] ];

let player_maxPower = 500;

/* ---------------------------------------

--------------------------------------- */

let lockX = 0;
let lockY = 0;
let lockTime = 0;

let opPos_none   = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ];
let opPos_current = opPos_none;
let opPos_Array = [opPos_none, opPos_levelOne, opPos_levelTwo, opPos_levelThree, opPos_levelFour];

let optionOne = 0;
let optionTwo = 0;
let optionThree = 0;
let optionFour = 0;

let optionArray = [GetPlayerObjectID, 0, 0, 0, 0];

function ExclFire()
{
	ShotSE(3);
	alternative(GetVirtualKeyState(VK_SLOWMOVE))
	case(KEY_FREE, KEY_PULL)
	{
		alternative(powerState)
		case(0)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
		}
		case(1)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			
			OptionFire2(1, 30, 6, 0, 0, 6, 270, 1);
		}
		case(2)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			OptionFire(2, 3, 8, 0, 0, 5.6, 270, 1);
			
			OptionFire2(1, 30, 6, 0, 0, 6, 270, 1);
			OptionFire2(2, 30, 6, 0, 0, 6, 270, 1);
		}
		case(3)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			OptionFire(2, 3, 10, 0, 0, 5.6, 270, 1);
			OptionFire(3, 3, 8, 0, 0, 5.6, 270, 1);
			
			OptionFire2(1, 30, 6, 0, 0, 6, 270, 1);
			OptionFire2(2, 30, 6, 0, 0, 6, 270, 1);
			OptionFire2(3, 30, 6, 0, 0, 6, 270, 1);
		}
		case(4, 5)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			OptionFire(2, 3, 10, 0, 0, 5.6, 270, 1);
			OptionFire(3, 3, 10, 0, 0, 5.6, 270, 1);
			OptionFire(4, 3, 8, 0, 0, 5.6, 270, 1);
			
			OptionFire2(1, 30, 6, 0, 0, 6, 270, 1);
			OptionFire2(2, 30, 6, 0, 0, 6, 270, 1);
			OptionFire2(3, 30, 6, 0, 0, 6, 270, 1);
			OptionFire2(4, 30, 6, 0, 0, 6, 270, 1);
		}
	}
	case(KEY_HOLD, KEY_PUSH)
	{
		alternative(powerState)
		case(0)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
		}
		case(1)
		{
			MainFire(0, 3, 14, -10, 16, 24, 270, 1);
			MainFire(0, 3, 14, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
		}
		case(2)
		{
			MainFire(0, 3, 13, -10, 16, 24, 270, 1);
			MainFire(0, 3, 13, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			OptionFire(2, 3, 8, 0, 0, 5.6, 270, 1);
		}
		case(3)
		{
			MainFire(0, 3, 11, -10, 16, 24, 270, 1);
			MainFire(0, 3, 11, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			OptionFire(2, 3, 10, 0, 0, 5.6, 270, 1);
			OptionFire(3, 3, 8, 0, 0, 5.6, 270, 1);
		}
		case(4, 5)
		{
			MainFire(0, 3, 12, -10, 16, 24, 270, 1);
			MainFire(0, 3, 12, 10, 16, 24, 270, 1);
			
			OptionFire(1, 3, 8, 0, 0, 5.6, 270, 1);
			OptionFire(2, 3, 10, 0, 0, 5.6, 270, 1);
			OptionFire(3, 3, 10, 0, 0, 5.6, 270, 1);
			OptionFire(4, 3, 8, 0, 0, 5.6, 270, 1);
		}
	}
}

function InitExclPlayer()
{
	
}

task ResetExclPlayer()
{
	loop(39){yield;}
	lockX = ObjMove_GetX(GetPlayerObjectID);
	lockY = ObjMove_GetY(GetPlayerObjectID);
	lockTime = 0;
}

function MainLoopExcl()
{
	ExclFire();
	if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH || GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
	{
		lockTime = 30;
	}
	else if(lockTime > 0)
	{
		lockTime--;
	}
	else
	{
		lockX = ObjMove_GetX(GetPlayerObjectID);
		lockY = ObjMove_GetY(GetPlayerObjectID);
	}
}


function OptionFire(op_obj, rate, damage, offsetX, offsetY, speed, angle, pene)
{
	let loc_op = optionArray[op_obj];
	if(canPlayerFire == true && !isPlayerDead)
	{
		if(CheckModulo(globalFireTimer, rate) == true)
		{
			Fire();
		}
	}
	
	function Fire()
	{
		CreateIcePlayerShot(ObjRender_GetX(loc_op) + offsetX, ObjRender_GetY(loc_op) + offsetY, speed, angle, damage * player_DamageMultiplier, pene);
	}
}

function OptionFire2(op_obj, rate, damage, offsetX, offsetY, speed, angle, pene)
{
	let loc_op = optionArray[op_obj];
	if(canPlayerFire == true && !isPlayerDead)
	{
		if(CheckModulo(globalFireTimer, rate) == true)
		{
			Fire();
		}
	}
	
	function Fire()
	{
		CreateBasicFrostPlayerShot(ObjRender_GetX(loc_op) + offsetX, ObjRender_GetY(loc_op) + offsetY, speed, angle, damage * player_DamageMultiplier, pene);
	}
}


task InitOptions()
{
	optionOne = CreateOptionObject();
	optionTwo = CreateOptionObject();
	optionThree = CreateOptionObject();
	optionFour = CreateOptionObject();
	
	OptionMoveLoop(optionOne, 0);
	OptionMoveLoop(optionTwo, 1);
	OptionMoveLoop(optionThree, 2);
	OptionMoveLoop(optionFour, 3);
	
	OptionDrawLoop(optionOne, 0);
	OptionDrawLoop(optionTwo, 0);
	OptionDrawLoop(optionThree, 0);
	OptionDrawLoop(optionFour, 0);
}

function FinishOptions()
{
	ascent(i in 0..length(optionArray))
	{
		if(optionArray[i] != 0)
		{
			OptionDeathEffect(optionArray[i]);
			OptionFinishFlags(optionArray[i]);
		}
	}
}

function CreateOptionObject()
{
	let op_obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjRender_SetPosition(op_obj, GetPlayerX, GetPlayerY, 0);
	Obj_SetValue(op_obj, "ACTIVE", 0);
	Obj_SetValue(op_obj, "ANIM", 0);
	return op_obj;
}

task OptionMoveLoop(op_obj, loc_pos)
{
	let distancetopoint = 0;
	let directiontopoint = 0;
	let orbit = 0;
	let count = 0;
	let dir1 = 270;
	let dir2 = 270;
	let warpOffset = 0;

	let destinationx = GetPlayerX;
	let destinationy = GetPlayerY;
	
	while(!Obj_IsDeleted(op_obj))
	{
		alternative(Obj_GetValueD(op_obj, "ACTIVE", 0))
		case(-1)
		{
			destinationx = lockX + opPos_current[loc_pos][0];
			destinationy = lockY + opPos_current[loc_pos][1];
			ObjRender_SetPosition(op_obj, destinationx, destinationy, 1);
			Obj_SetValue(op_obj, "ACTIVE", 1);
		}
		case(0)
		{
			
		}
		case(1)
		{
			distancetopoint = ((destinationx - ObjRender_GetX(op_obj))^2 + (destinationy - ObjRender_GetY(op_obj))^2)^0.5;
			directiontopoint = atan2(destinationy - ObjRender_GetY(op_obj),destinationx - ObjRender_GetX(op_obj));
			if(distancetopoint >= 1)
			{
				ObjRender_SetPosition(op_obj, ObjRender_GetX(op_obj) + cos(directiontopoint) * distancetopoint * 0.4, ObjRender_GetY(op_obj) + sin(directiontopoint) * distancetopoint * 0.4, 1);
			}
			else
			{
				ObjRender_SetPosition(op_obj, destinationx, destinationy, 1);
			}
			
			destinationx = lockX + opPos_current[loc_pos][0];
			destinationy = lockY + opPos_current[loc_pos][1];
		}
		yield;
	}
}

task OptionDrawLoop(op_obj, angle)
{
	let orbit = 0;
	let orbitB = 0;
	let count = 0;
	let animFrame = 0;
	let animState = 0;
	let animScale = 0.25;
	let animScaleVar = 0.1;
	let animScaleMod = 0.32;
	let blinkCounter = -1;
	let blinkFlag = -1;
	
	let optionDraw = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optionDraw, img_player);
	ObjSprite2D_SetSourceRect(optionDraw, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optionDraw, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
	Obj_SetRenderPriorityI(optionDraw, 25);
	
	let optioneffect = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optioneffect, img_player);
	ObjSprite2D_SetSourceRect(optioneffect, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optioneffect, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optioneffect, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(optioneffect, 24);
	
	while(!Obj_IsDeleted(op_obj))
	{
		if(playerPower != player_maxPower)
		{
			ObjRender_SetAlpha(optioneffect, 0);
		}
		else
		{
			ObjRender_SetAlpha(optioneffect, 150);
		}
		
		if(Obj_GetValueD(op_obj, "RESET", false) == true)
		{
			animState = 0;
			animFrame = 0;
			animScale = 0.25;
			animScaleMod = 0.2;
			orbitB = 0;
			Obj_SetValue(op_obj, "RESET", false);
		}
		
		alternative(Obj_GetValueD(op_obj, "ACTIVE", 0))
		case(-1, 0)
		{
			ObjRender_SetAlpha(optionDraw, 0);
			ObjRender_SetAlpha(optioneffect, 0);
		}
		case(1)
		{
			if(animState == 0)
			{
				if(animFrame == 14)
				{
					animState = 1;
				}
				count = 0;
				animScale += animScaleMod;
				animScaleMod -= 0.021;
				ObjRender_SetScaleXYZ(optionDraw, animScale, animScale, 1);
				ObjRender_SetBlendType(optionDraw, BLEND_ADD_ARGB);
				ObjSprite2D_SetSourceRect(optionDraw, optionX1, optionY1, optionX2, optionY2);
				animFrame++;
			}
			else
			{
				if(lockTime == 0)
				{
					if(animScale > 0.95)
					{
						animScale -= animScaleVar;
					}
					ObjSprite2D_SetSourceRect(optionDraw, optionX1, optionY1, optionX2, optionY2);
					ObjRender_SetScaleXYZ(optionDraw, animScale + cos(count*10.5)/10, animScale + cos(count*10.5)/10, 1);
					ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
					count++;
				}
				else if(lockTime == 30)
				{
					if(animScale < 1.15)
					{
						animScale += animScaleVar;
					}
					ObjSprite2D_SetSourceRect(optionDraw, optionX1 + 16, optionY1, optionX2 + 16, optionY2);
					ObjRender_SetScaleXYZ(optionDraw, animScale + cos(count*10.5)/6, animScale + cos(count*10.5)/6, 1);
					ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
					count += 1.5;
				}
				else if(lockTime > 0 && lockTime < 30)
				{
					if(animScale > 1)
					{
						animScale -= animScaleVar;
					}
					if(blinkCounter == 1)
					{
						if(blinkFlag == -1)
						{
							ObjSprite2D_SetSourceRect(optionDraw, optionX1, optionY1, optionX2, optionY2);
							blinkFlag = -blinkFlag;
						}
						else
						{
							ObjSprite2D_SetSourceRect(optionDraw, optionX1 + 16, optionY1, optionX2 + 16, optionY2);
							blinkFlag = -blinkFlag;
						}
						blinkCounter = -1;
					}

					ObjRender_SetScaleXYZ(optionDraw, animScale, animScale, 1);
					ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
					count = 0;
					blinkCounter++;
				}
			}
			ObjRender_SetAlpha(optionDraw, 255);
		}

		ObjRender_SetAngleZ(optioneffect, orbit);
		
		ObjRender_SetScaleXYZ(optioneffect, 1.52, 1.52, 1);
		
		ObjRender_SetPosition(optionDraw, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
		ObjRender_SetPosition(optioneffect, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
		
		orbit += 6;
		yield;
	}
	let scale = 1;
	while(scale > 0)
	{
		scale -= 0.25;
		ObjRender_SetScaleY(optionDraw, scale/2);
		ObjRender_SetScaleX(optioneffect, scale);
		yield;
	}
	Obj_Delete(optionDraw);
	Obj_Delete(optioneffect);
}

task OptionDeathEffect(op_obj)
{
	let eff_scaleX = 1;
	let eff_scaleY = 1;
	let optionEffect = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optionEffect, img_player);
	ObjSprite2D_SetSourceRect(optionEffect, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optionEffect, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optionEffect, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(optionEffect, 25);
	ObjRender_SetPosition(optionEffect, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
	
	while(eff_scaleX > 0)
	{
		eff_scaleX -= 0.1;
		eff_scaleY += 0.1;
		ObjRender_SetScaleXYZ(optionEffect, eff_scaleX, eff_scaleY, 1);
		yield;
	}
	Obj_Delete(optionEffect);
}
	
function OptionFinishFlags(op_obj)
{
	Obj_SetValue(op_obj, "ACTIVE", 0);
}

function OptionResetFlags(op_obj)
{
	Obj_SetValue(op_obj, "ACTIVE", -1);
	Obj_SetValue(op_obj, "RESET", true);
}


task PowerCheck(didGet, op_deleteType)
{
	if(playerPower >= 0 && playerPower < 100 && powerState != 0)
	{
		powerState = 0;
		opPos_current = opPos_Array[powerState];
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[1]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		optionArray = [GetPlayerObjectID, 0, 0, 0, 0];
	}
	else if(playerPower >= 100 && playerPower < 200 && powerState != 1)
	{
		powerState = 1;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[2]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		optionArray = [GetPlayerObjectID, optionOne, 0, 0, 0];
	}
	else if(playerPower >= 200 && playerPower < 300 && powerState != 2)
	{
		powerState = 2;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[3]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		OptionResetFlags(optionTwo);
		optionArray = [GetPlayerObjectID, optionOne, optionTwo, 0, 0];
	}
	else if(playerPower >= 300 && playerPower < 400 && powerState != 3)
	{
		powerState = 3;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[4]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		OptionResetFlags(optionTwo);
		OptionResetFlags(optionThree);
		optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, 0];
	}
	else if(playerPower >= 400 && playerPower < 500 && powerState != 4)
	{
		powerState = 4;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		
		if(didGet != -1)
		{
			alternative(op_deleteType)
			case(0)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			case(2)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionDeathEffect(optionArray[i]);
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			OptionResetFlags(optionOne);
			OptionResetFlags(optionTwo);
			OptionResetFlags(optionThree);
			OptionResetFlags(optionFour);
			optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, optionFour];
		}
	}
	else if(playerPower >= 500 && powerState != 5)
	{
		powerState = 5;
		opPos_current = opPos_Array[4];
		playerPower = 500;
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		if(didGet == 2)
		{
			alternative(op_deleteType)
			case(0)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			OptionResetFlags(optionOne);
			OptionResetFlags(optionTwo);
			OptionResetFlags(optionThree);
			OptionResetFlags(optionFour);
			optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, optionFour];
		}
	}
}

task CreateIcePlayerShot(x, y, speed, angle, dmg, pene)
{
	if(!IsPermitPlayerShot)
	{
		return;
	}
	
	let loc_x;
	let loc_y;
	let loc_angle = 0;
	
	let angMod = rand(-10, 10);
	let y_vel = speed;
	let rFrame = 0;
	let alpha = 100;
	
	let obj = CreatePlayerShotA1(x, y, speed, angle, dmg, 1, 3);
	Obj_SetRenderPriorityI(obj, 47);
	
	let playerShot = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(playerShot, img_player);
	ObjSprite2D_SetSourceRect(playerShot, 64, 192, 96, 224);
	ObjSprite2D_SetDestCenter(playerShot);
	ObjRender_SetBlendType(playerShot, BLEND_ADD_ARGB);
	ObjRender_SetAlpha(playerShot, 100);
	ObjRender_SetAngleZ(playerShot, angMod);
	Obj_SetRenderPriorityI(playerShot, 47);
	ObjRender_SetPosition(playerShot, x, y, 1);
	ObjRender_SetScaleXYZ(playerShot, 1, 1, 1);
	
	while(alpha > 0 && !Obj_IsDeleted(obj))
	{
		loc_x = ObjMove_GetX(obj);
		loc_y = ObjMove_GetY(obj);
		//loc_angle = ObjMove_GetAngle(obj);
		if(rFrame >= 20)
		{
			ObjRender_SetAlpha(playerShot, alpha);
			alpha -= 10;
		}
		ObjRender_SetPosition(playerShot, round(loc_x), round(loc_y), 1);
		ObjRender_SetAngleZ(playerShot, loc_angle);
		loc_angle += angMod;
		rFrame++;
		yield;
	}
	if(!Obj_IsDeleted(obj))
	{
		Obj_Delete(obj);
	}
	Obj_Delete(playerShot);
}

task CreateBasicFrostPlayerShot(x, y, speed, dir, dmg, pene)
{	
	if(!IsPermitPlayerShot)
	{
		return;
	}
	
	function ShotFade
	{
		let frame = 0;
		let alpha = 250;
		let angmod = 0;
		let inx = loc_x;
		let iny = loc_y;
		let fadeeff = ObjPrim_Create(OBJ_SPRITE_2D);
		ObjPrim_SetTexture(fadeeff, img_player);
		ObjSprite2D_SetSourceRect(fadeeff, 64, 240, 96, 256);
		ObjSprite2D_SetDestCenter(fadeeff);
		ObjRender_SetBlendType(fadeeff, BLEND_ADD_ARGB);
		Obj_SetRenderPriorityI(fadeeff, 47);
		ObjSprite2D_SetDestCenter(fadeeff);
		//ObjRender_SetPosition(fadeeff, inx, iny, 1);
		//ObjRender_SetScaleXYZ(fadeeff, 1, 1, 1);
		ObjRender_SetAngleZ(fadeeff, 270);
		while(alpha > 0)
		{
			if(frame >= 0 && frame < 3)
			{
				ObjSprite2D_SetSourceRect(fadeeff, 96, 240, 128, 256);
			}
			if(frame >= 6 && frame < 9)
			{
				ObjSprite2D_SetSourceRect(fadeeff, 128, 240, 160, 256);
			}
			if(frame >= 9 && frame < 12)
			{
				ObjSprite2D_SetSourceRect(fadeeff, 160, 240, 224, 256);
			}
			frame++;
			alpha -= 15;
			iny += 5*sin(dir);
			ObjRender_SetAngleZ(fadeeff, 270 + angmod);
			//angmod += 20;
			ObjRender_SetAlpha(fadeeff, alpha);
			ObjRender_SetPosition(fadeeff, inx, iny, 1);
			yield;
		}
		Obj_Delete(fadeeff);
	}
	
	let loc_x;
	let loc_y;
	
	let obj = CreatePlayerShotA1(x, y, speed, dir, dmg, 1, 4);
	Obj_SetRenderPriorityI(obj, 47);
	
	while(!Obj_IsDeleted(obj))
	{
		loc_x = ObjMove_GetX(obj);
		loc_y = ObjMove_GetY(obj);
		yield;
	}
	if(loc_y >= 0)
	{
		ShotFade
	}
}
