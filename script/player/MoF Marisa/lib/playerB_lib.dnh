/* -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
	Player Recreation Project: MoF Marisa
	by Frenticpony

	playerB_lib.dnh v2.5
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */

let optionX1 = 144;
let optionY1 = 144;
let optionX2 = 160;
let optionY2 = 160;

let option_laserDamage = 0.52 * player_DamageMultiplier;

let opPos_levelOne   = [ 
	[0, -32, 0, -25], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelTwo   = [ 
	[-32, 0, -8, -25], 
	[32, 0, 8, -25], 
	[0, 0, 0, 0], 
	[0, 0, 0, 0] ];
	
let opPos_levelThree = [ 
	[-32, 0, -16, -25], 
	[32, 0, 16, -25], 
	[0, -32, 0, -25], 
	[0, 0, 0, 0] ];
	
let opPos_levelFour  = [ 
	[-32, 0, -16, 0], 
	[32, 0, 16, 0], 
	[-8, -32, -8, -25], 
	[8, -32, 8, -25] ];

let laser_damage = [[0, 0, 0, 0],[10, 0, 0, 0],[10, 10, 0, 0],[9, 10, 9, 0],[9, 10, 10, 9],[9, 10, 10, 9]];
let player_maxPower = 500;

/* ---------------------------------------

--------------------------------------- */

let opPos_none   = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ];
let opPos_current = opPos_none;
let opPos_Array = [opPos_none, opPos_levelOne, opPos_levelTwo, opPos_levelThree, opPos_levelFour];

let optionOne = 0;
let optionTwo = 0;
let optionThree = 0;
let optionFour = 0;

let optionArray = [0, 0, 0, 0];

function ExclFire()
{
	ShotSE(3);
	alternative(GetVirtualKeyState(VK_SLOWMOVE))
	case(KEY_FREE, KEY_PULL)
	{
		alternative(powerState)
		case(0)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
		}
		case(1)
		{
			MainFire(0, 3, 14, -10, 16, 24, 270, 1);
			MainFire(0, 3, 14, 10, 16, 24, 270, 1);
		}
		case(2)
		{
			MainFire(0, 3, 13, -10, 16, 24, 270, 1);
			MainFire(0, 3, 13, 10, 16, 24, 270, 1);
		}
		case(3)
		{
			MainFire(0, 3, 12, -10, 16, 24, 270, 1);
			MainFire(0, 3, 12, 10, 16, 24, 270, 1);
		}
		case(4, 5)
		{
			MainFire(0, 3, 11, -10, 16, 24, 270, 1);
			MainFire(0, 3, 11, 10, 16, 24, 270, 1);
		}
	}
	case(KEY_HOLD, KEY_PUSH)
	{
		alternative(powerState)
		case(0)
		{
			MainFire(0, 3, 15, -10, 16, 24, 270, 1);
			MainFire(0, 3, 15, 10, 16, 24, 270, 1);
		}
		case(1)
		{
			MainFire(0, 3, 14, -10, 16, 24, 270, 1);
			MainFire(0, 3, 14, 10, 16, 24, 270, 1);
		}
		case(2)
		{
			MainFire(0, 3, 13, -10, 16, 24, 270, 1);
			MainFire(0, 3, 13, 10, 16, 24, 270, 1);
		}
		case(3)
		{
			MainFire(0, 3, 12, -10, 16, 24, 270, 1);
			MainFire(0, 3, 12, 10, 16, 24, 270, 1);
		}
		case(4, 5)
		{
			MainFire(0, 3, 11, -10, 16, 24, 270, 1);
			MainFire(0, 3, 11, 10, 16, 24, 270, 1);
		}
	}
}

function InitExclPlayer()
{

}

function ResetExclPlayer()
{

}

function MainLoopExcl()
{
	ExclFire();
}


task InitOptions()
{
	optionOne = CreateOptionObject();
	optionTwo = CreateOptionObject();
	optionThree = CreateOptionObject();
	optionFour = CreateOptionObject();
	
	OptionMoveLoop(optionOne, 0);
	OptionMoveLoop(optionTwo, 1);
	OptionMoveLoop(optionThree, 2);
	OptionMoveLoop(optionFour, 3);
	
	OptionDrawLoop(optionOne, 0);
	OptionDrawLoop(optionTwo, 0);
	OptionDrawLoop(optionThree, 0);
	OptionDrawLoop(optionFour, 0);
	InitCreateLasers();
}

function FinishOptions()
{
	ascent(i in 0..length(optionArray))
	{
		if(optionArray[i] != 0)
		{
			OptionDeathEffect(optionArray[i]);
			OptionFinishFlags(optionArray[i]);
		}
	}
}

function CreateOptionObject()
{
	let op_obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
	ObjRender_SetPosition(op_obj, GetPlayerX, GetPlayerY, 0);
	Obj_SetValue(op_obj, "ACTIVE", 0);
	Obj_SetValue(op_obj, "ANIM", 0);
	return op_obj;
}

task OptionMoveLoop(op_obj, loc_pos)
{
	let distancetopoint = 0;
	let directiontopoint = 0;
	let orbit = 0;
	let count = 0;
	let dir1 = 270;
	let dir2 = 270;
	let warpOffset = 0;

	let destinationx = GetPlayerX;
	let destinationy = GetPlayerY;
	
	while(!Obj_IsDeleted(op_obj))
	{
		alternative(Obj_GetValueD(op_obj, "ACTIVE", 0))
		case(-1)
		{
			if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
			{
				destinationx = GetPlayerX + opPos_current[loc_pos][2];
				destinationy = GetPlayerY + opPos_current[loc_pos][3];
			}
			else
			{
				destinationx = GetPlayerX + opPos_current[loc_pos][0];
				destinationy = GetPlayerY + opPos_current[loc_pos][1];
			}
			ObjRender_SetPosition(op_obj, destinationx, destinationy, 1);
			Obj_SetValue(op_obj, "ACTIVE", 1);
		}
		case(0)
		{
			
		}
		case(1)
		{
			distancetopoint = ((destinationx - ObjRender_GetX(op_obj))^2 + (destinationy - ObjRender_GetY(op_obj))^2)^0.5;
			directiontopoint = atan2(destinationy - ObjRender_GetY(op_obj),destinationx - ObjRender_GetX(op_obj));
			if(distancetopoint >= 1)
			{
				ObjRender_SetPosition(op_obj, ObjRender_GetX(op_obj) + cos(directiontopoint) * distancetopoint * 0.4, ObjRender_GetY(op_obj) + sin(directiontopoint) * distancetopoint * 0.4, 1);
			}
			else
			{
				ObjRender_SetPosition(op_obj, destinationx, destinationy, 1);
			}
			
			if(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD)
			{
				destinationx = GetPlayerX + opPos_current[loc_pos][2];
				destinationy = GetPlayerY + opPos_current[loc_pos][3];
			}
			else
			{
				destinationx = GetPlayerX + opPos_current[loc_pos][0];
				destinationy = GetPlayerY + opPos_current[loc_pos][1];
			}
		}
		yield;
	}
}

task OptionDrawLoop(op_obj, angle)
{
	let orbit = 0;
	let orbitB = 0;
	let count = 0;
	let animFrame = 0;
	let animState = 0;
	let animScale = 0.25;
	let animScaleMod = 0.32;
	
	let optionDraw = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optionDraw, img_player);
	ObjSprite2D_SetSourceRect(optionDraw, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optionDraw, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
	Obj_SetRenderPriorityI(optionDraw, 25);
	
	let optioneffect = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optioneffect, img_player);
	ObjSprite2D_SetSourceRect(optioneffect, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optioneffect, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optioneffect, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(optioneffect, 24);
	
	while(!Obj_IsDeleted(op_obj))
	{
		if(playerPower != player_maxPower)
		{
			ObjRender_SetAlpha(optioneffect, 0);
		}
		else
		{
			ObjRender_SetAlpha(optioneffect, 150);
		}
		
		if(Obj_GetValueD(op_obj, "RESET", false) == true)
		{
			animState = 0;
			animFrame = 0;
			animScale = 0.25;
			animScaleMod = 0.2;
			orbitB = 0;
			Obj_SetValue(op_obj, "RESET", false);
		}
		
		alternative(Obj_GetValueD(op_obj, "ACTIVE", 0))
		case(-1, 0)
		{
			ObjRender_SetAlpha(optionDraw, 0);
			ObjRender_SetAlpha(optioneffect, 0);
		}
		case(1)
		{
			if(animState == 0)
			{
				if(animFrame == 14)
				{
					animState = 1;
				}
				count = 0;
				animScale += animScaleMod;
				animScaleMod -= 0.021;
				ObjRender_SetScaleXYZ(optionDraw, animScale, animScale, 1);
				ObjRender_SetBlendType(optionDraw, BLEND_ADD_ARGB);
				animFrame++;
			}
			else
			{
				animScale = 0.95;
				ObjRender_SetScaleXYZ(optionDraw, 0.95 + cos(count*10.5)/10, 0.95 + cos(count*10.5)/10, 1);
				ObjRender_SetBlendType(optionDraw, BLEND_ALPHA);
				count++;
			}
			ObjRender_SetAlpha(optionDraw, 255);
		}

		ObjRender_SetAngleZ(optioneffect, orbit);
		
		ObjRender_SetScaleXYZ(optioneffect, 1.52, 1.52, 1);
		
		ObjRender_SetPosition(optionDraw, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
		ObjRender_SetPosition(optioneffect, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
		
		orbit += 6;
		yield;
	}
	let scale = 1;
	while(scale > 0)
	{
		scale -= 0.25;
		ObjRender_SetScaleY(optionDraw, scale/2);
		ObjRender_SetScaleX(optioneffect, scale);
		yield;
	}
	Obj_Delete(optionDraw);
	Obj_Delete(optioneffect);
}

task OptionDeathEffect(op_obj)
{
	let eff_scaleX = 1;
	let eff_scaleY = 1;
	let optionEffect = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(optionEffect, img_player);
	ObjSprite2D_SetSourceRect(optionEffect, optionX1, optionY1, optionX2, optionY2);
	ObjSprite2D_SetDestRect(optionEffect, -7.5, -7.5, 8.5, 8.5);
	ObjRender_SetBlendType(optionEffect, BLEND_ADD_ARGB);
	Obj_SetRenderPriorityI(optionEffect, 25);
	ObjRender_SetPosition(optionEffect, ObjRender_GetX(op_obj), ObjRender_GetY(op_obj), 1);
	
	while(eff_scaleX > 0)
	{
		eff_scaleX -= 0.1;
		eff_scaleY += 0.1;
		ObjRender_SetScaleXYZ(optionEffect, eff_scaleX, eff_scaleY, 1);
		yield;
	}
	Obj_Delete(optionEffect);
}
	
function OptionFinishFlags(op_obj)
{
	Obj_SetValue(op_obj, "ACTIVE", 0);
}

function OptionResetFlags(op_obj)
{
	Obj_SetValue(op_obj, "ACTIVE", -1);
	Obj_SetValue(op_obj, "RESET", true);
}


task PowerCheck(didGet, op_deleteType)
{
	if(playerPower >= 0 && playerPower < 100 && powerState != 0)
	{
		powerState = 0;
		opPos_current = opPos_Array[powerState];
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[1]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		optionArray = [GetPlayerObjectID, 0, 0, 0, 0];
	}
	else if(playerPower >= 100 && playerPower < 200 && powerState != 1)
	{
		powerState = 1;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[2]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		optionArray = [GetPlayerObjectID, optionOne, 0, 0, 0];
	}
	else if(playerPower >= 200 && playerPower < 300 && powerState != 2)
	{
		powerState = 2;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[3]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		OptionResetFlags(optionTwo);
		optionArray = [GetPlayerObjectID, optionOne, optionTwo, 0, 0];
	}
	else if(playerPower >= 300 && playerPower < 400 && powerState != 3)
	{
		powerState = 3;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		alternative(op_deleteType)
		case(0)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(1)
		{
			OptionDeathEffect(optionArray[4]);
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		case(2)
		{
			ascent(i in 1..length(optionArray))
			{
				if(optionArray[i] != 0)
				{
					OptionDeathEffect(optionArray[i]);
					OptionFinishFlags(optionArray[i]);
				}
			}
		}
		OptionResetFlags(optionOne);
		OptionResetFlags(optionTwo);
		OptionResetFlags(optionThree);
		optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, 0];
	}
	else if(playerPower >= 400 && playerPower < 500 && powerState != 4)
	{
		powerState = 4;
		
		opPos_current = opPos_Array[powerState];
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		
		if(didGet != -1)
		{
			alternative(op_deleteType)
			case(0)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			case(2)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionDeathEffect(optionArray[i]);
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			OptionResetFlags(optionOne);
			OptionResetFlags(optionTwo);
			OptionResetFlags(optionThree);
			OptionResetFlags(optionFour);
			optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, optionFour];
		}
	}
	else if(playerPower >= 500 && powerState != 5)
	{
		powerState = 5;
		opPos_current = opPos_Array[4];
		playerPower = 500;
		if(didGet == 1)
		{
			PlaySE(se_powerup1);
		}
		if(didGet == 2)
		{
			alternative(op_deleteType)
			case(0)
			{
				ascent(i in 1..length(optionArray))
				{
					if(optionArray[i] != 0)
					{
						OptionFinishFlags(optionArray[i]);
					}
				}
			}
			OptionResetFlags(optionOne);
			OptionResetFlags(optionTwo);
			OptionResetFlags(optionThree);
			OptionResetFlags(optionFour);
			optionArray = [GetPlayerObjectID, optionOne, optionTwo, optionThree, optionFour];
		}
	}
}

function InitCreateLasers()
{
	CreateLaserPlayerShot(optionOne, 0, 270, 0, 0, 0);
	CreateLaserPlayerShot(optionTwo, 0, 270, 0, 0, 1);
	CreateLaserPlayerShot(optionThree, 0, 270, 0, 0, 2);
	CreateLaserPlayerShot(optionFour, 0, 270, 0, 0, 3);
}

task CreateLaserPlayerShot(op_obj, speed, dir, dmg, pene, id)
{
	let loc_opObj = 0;
	let rframe = 0;
	let counter = 0;
	let angMod = rand(-10, 10);
	let nohome = false;
	let ar = GetAllEnemyID;
	let dis;
	let getX;
	let getY;
	let scale = 0;
	let alpha = 1;
	let laserY = 0;
	let base_scalePulse = 100;
	let colorPulse = 0;
	
	let obj = ObjShot_Create(OBJ_STRAIGHT_LASER);
	ObjShot_Regist(obj);
	ObjShot_SetDamage(obj, 0);
	ObjShot_SetGraphic(obj, 1);
	ObjLaser_SetLength(obj, 600);
	ObjLaser_SetIntersectionWidth(obj, 16);
	ObjMove_SetAngle(obj, dir);
	
	let playerShot = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(playerShot, img_player);
	ObjSprite2D_SetSourceRect(playerShot, 0, 176, 256*4, 192);
	ObjSprite2D_SetDestRect(playerShot, 0, -8, 256*4, 8);
	ObjRender_SetBlendType(playerShot, BLEND_ADD_ARGB);
	ObjRender_SetAlpha(playerShot, 0);
	ObjRender_SetAngleZ(playerShot, dir);
	Obj_SetRenderPriorityI(playerShot, 47);
	ObjRender_SetScaleXYZ(playerShot, 1, 1, 1);
	
	let laserBase = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(laserBase, img_player);
	ObjSprite2D_SetSourceRect(laserBase, 96, 192, 128, 224);
	ObjSprite2D_SetDestRect(laserBase, -16, -16, 16, 16);
	ObjRender_SetBlendType(laserBase, BLEND_ADD_ARGB);
	ObjRender_SetAlpha(laserBase, 150);
	ObjRender_SetAngleZ(laserBase, 0);
	Obj_SetRenderPriorityI(laserBase, 48);
	ObjRender_SetScaleXYZ(laserBase, 1, 1, 1);

	
	while(!Obj_IsDeleted(op_obj))
	{
		getX = ObjRender_GetX(op_obj);
		getY = ObjRender_GetY(op_obj);
		
		if(GetVirtualKeyState(VK_SHOT) == KEY_FREE && globalFireTimer == -1 || Obj_GetValueD(op_obj, "ACTIVE", 0) == 0)
		{
			if(scale > 0)
			{
				scale -= 0.1;
			}
			else if(scale < 0)
			{
				scale = 0;
			}
			alpha = 150;
			ObjRender_SetScaleXYZ(laserBase, scale, scale, 1);
			ObjShot_SetDamage(obj, 0);
		}
		else
		{
			if(ObjCol_IsIntersected(obj))
			{
				colorPulse++;
				ObjRender_SetColor(playerShot, 256, cos(colorPulse*50)*150, 0);
			}
			else
			{
				ObjRender_SetColor(playerShot, 256, 256, 256);
			}
			
			if(scale < 1)
			{
				scale += 0.1;
			}
			else if(scale > 1)
			{
				scale = 1;
			}
			alpha = 150;
			ObjRender_SetScaleXYZ(laserBase, (scale+0.3) + cos(rframe*21)/6, (scale+0.3) + cos(rframe*21)/6, 1);
			ObjShot_SetDamage(obj, (laser_damage[powerState][id] / 5) * player_DamageMultiplier);
		}
		ObjRender_SetAngleZ(playerShot, dir);
		ObjSprite2D_SetSourceRect(playerShot, 0 + laserY, 176, 256*4 + laserY, 192);
		ObjRender_SetScaleXYZ(playerShot, 1, scale, 1);
		ObjRender_SetAlpha(playerShot, alpha);
		ObjMove_SetPosition(obj, getX, getY);
		ObjRender_SetPosition(playerShot, round(getX), round(getY), 1);
		ObjRender_SetPosition(laserBase, round(getX), round(getY), 1);
		rframe++;
		laserY -= 5;
		//dir += angMod;
		yield;
	}
}
