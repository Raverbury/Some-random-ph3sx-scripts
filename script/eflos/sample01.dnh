#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Eflos.Sample01"]
#Text["Eflos.Sample01: Le first script"]

// Shotsheet
#include "script/default_system/Default_ShotConst.txt"

// Libs
#include "script/Cutin/Cutin.txt"
#include "script/Gizmo/GizmoSpriteLibrary.txt"
#include "./lib/common.dnh"

let objBoss;
let objScene = GetEnemyBossSceneObjectID();
let cutinBoss = GetCurrentScriptDirectory() ~ "asset/img/cutin_sekibanki.png";

@Event{
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(62);
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
    others {
        // do something in default case
    }
}

@Initialize{
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    PlayBGM(GetCurrentScriptDirectory() ~ "asset/bgm/th10_12.ogg", 0, 100);

    TDrawBoss;
    TFinalize(objBoss, objScene);
    TFirePattern;
}

@MainLoop{
    ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32); 
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
    yield;
}

task TDrawBoss {
    renderKaguyaIN(objBoss);
    return;
}

task TFirePattern {
    ObjMove_SetDestAtFrame(objBoss, GetCenterX(), 60, 60);
    wait(60);
    ObjEnemyBossScene_StartSpell(objScene);
    ObjCutin_SetSpellcardS4("Testing Cutin 1", cutinBoss, NAZRIN, 240, 104, 104);
    ObjCutin_LaunchS3(BYAKUREN, cutinBoss, "Lunatic");
    wait(120);
    let tilt = 33;
    let BRANCH = 20;
    let BURST = 40;
    let DELAY = 90;
    let BURST_DELAY = 2;
    let currentBurst = 0;
    let random2 = 5;
    let angleT = GetAngleToPlayer(objBoss);
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) {
        let bossX = ObjMove_GetX(objBoss);
        let bossY = ObjMove_GetY(objBoss);
        let randomBulletTilt = 0;
        ascent (j in 0..BRANCH) {
            let branchAngle = angleT + (360 * ((j) / BRANCH)) + tilt * random2/3 * currentBurst;
            let bulletX = bossX + cos(branchAngle) * 9 * currentBurst;
            let bulletY = bossY + sin(branchAngle) * 9 * currentBurst;
            let bulletAngle = 180 + (branchAngle + tilt + randomBulletTilt);
            let bulletGraphic;
            if (tilt > 0) {
                bulletGraphic = IntegerModRollover(currentBurst, DS_MISSILE_RED, DS_MISSILE_GREEN);
            }
            else {
                bulletGraphic = IntegerModRollover(currentBurst, DS_MISSILE_SKY, DS_MISSILE_WHITE);
            }
            let bullet = CreateShotA1(bulletX, bulletY, 0, bulletAngle, bulletGraphic, 10);
            ObjShot_SetSpellResist(bullet, false);
            BulletCommand(bullet, 30 + (BURST - currentBurst) * BURST_DELAY);
        }
        
        // increase burst counter and wait accordingly
        currentBurst += 1;
        // if all bursts have been fired, reset stuff
        if (currentBurst >= BURST) {
            currentBurst = 0;
            tilt *= -1;
            random2 = rand_int(1, 5);
            randomBulletTilt = rand_int(-2, 2);
            angleT = GetAngleToPlayer(objBoss);
            wait(DELAY);
        }
        else {
            wait(BURST_DELAY);
        }
    }
}

task BulletCommand(bullet, delay) {
    wait(delay);
    if (!Obj_IsDeleted(bullet)) {
        ObjMove_SetSpeed(bullet, 4);
        ObjMove_SetAcceleration(bullet, -0.009);
        ObjMove_SetMaxSpeed(bullet, 1.8);
    return;
    }
}